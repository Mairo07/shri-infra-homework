name: Release Pipeline

on:
  workflow_dispatch:
  
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install 
      - run: npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm install 
      - run: npm run test

  create-release-branch:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Git
        run: |
          git config user.name "${{ github.event.sender.login }}"
          git config user.email "${{ github.event.sender.login }}@users.noreply.github.com"
      - name: Create Release Branch
        run: |
          BRANCH_NAME="releases/${{ github.run_number }}"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
      - name: Create Tag
        run: |
          TAG_NAME="${{ github.run_number }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

  build-and-push-docker:
    needs: create-release-branch
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Log in to Yandex Container Registry
        run: echo "${{ secrets.CRY_TOKEN }}" | docker login --username oauth --password-stdin cr.yandex
      - name: Build Docker Image
        run: |
          IMAGE_NAME="cr.yandex/${{ secrets.CRY_ID }}/app:${{ github.run_number }}"
          IMAGE_LATEST="cr.yandex/${{ secrets.CRY_ID }}/app:latest"
          docker build -t $IMAGE_NAME -t $IMAGE_LATEST .
      - name: Push Docker Image to Container Registry Yandex
        run: |
          IMAGE_NAME="cr.yandex/${{ secrets.CRY_ID }}/app:${{ github.run_number }}"
          IMAGE_LATEST="cr.yandex/${{ secrets.CRY_ID }}/app:latest"
          docker push $IMAGE_NAME
          docker push $IMAGE_LATEST
  
  create-release-issue:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get Commit List
        id: commit-list
        run: |
          latest_tag=$(git describe --tags --abbrev=0 HEAD^ || echo "")
          if [ -z "$latest_tag" ]; then
            echo "No tags found, using initial commit"
            echo "::set-output name=commits::$(git log --pretty=format:'- %s' --no-merges)"
          else
            echo "::set-output name=commits::$(git log $latest_tag..HEAD --pretty=format:'- %s' --no-merges)"
          fi
      - name: Create Issue
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          RELEASE_DATE: $(date)
          RELEASE_AUTHOR: ${{ github.event.sender.login }}
          RELEASE_VERSION: ${{ github.run_number }}
          COMMIT_LIST: ${{ steps.commit-list.outputs.commits }}
          DOCKER_IMAGE: cr.yandex/${{ secrets.CRY_ID }}/app:${{ github.run_number }}
        run: |
          gh issue create --title "Релиз ${RELEASE_VERSION}" --body "$(
            echo '## Информация о релизе'
            echo '**Дата:** ${RELEASE_DATE}'
            echo '**Автора релиза:** ${RELEASE_AUTHOR}'
            echo '**Номер версии:** ${RELEASE_VERSION}'
            echo '**Список коммитов:**
            ${COMMIT_LIST}'
            echo '**Docker-образ:** [${DOCKER_IMAGE}](${DOCKER_IMAGE})'
          )" --assignee $RELEASE_AUTHOR

